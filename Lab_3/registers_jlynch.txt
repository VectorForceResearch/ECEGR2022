--------------------------------------------------------------------------------
--
-- LAB #3
--
--------------------------------------------------------------------------------

Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_unsigned.all;

entity bitstorage is
  port(bitin: in std_logic;
 		 enout: in std_logic;
 		 writein: in std_logic;
 		 bitout: out std_logic);
end entity bitstorage;

architecture memlike of bitstorage is
 	signal q: std_logic := '0';
begin
  process(writein) is
  begin
    if (rising_edge(writein)) then
      q <= bitin;
    end if;
  end process;

-- Note that data is output only when enout = 0
  bitout <= q when enout = '0' else 'Z';
end architecture memlike;

--------------------------------------------------------------------------------

Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_unsigned.all;

entity register8 is
 	port(datain: in std_logic_vector(7 downto 0);
 	     enout:  in std_logic;
 	     writein: in std_logic;
 	     dataout: out std_logic_vector(7 downto 0));
end entity register8;

architecture memmy of register8 is
  component bitstorage
 		port(bitin: in std_logic;
 		 	 enout: in std_logic;
 		 	 writein: in std_logic;
 		 	 bitout: out std_logic);
  end component;
begin
  -- insert your code here.
  bit0 : entity work.bitstorage(memlike) port map (datain_0, enout, writein, dataout_0);
  bit1 : entity work.bitstorage(memlike) port map (datain_1, enout, writein, dataout_1);
  bit2 : entity work.bitstorage(memlike) port map (datain_2, enout, writein, dataout_2);
  bit3 : entity work.bitstorage(memlike) port map (datain_3, enout, writein, dataout_3);
  bit4 : entity work.bitstorage(memlike) port map (datain_4, enout, writein, dataout_4);
  bit5 : entity work.bitstorage(memlike) port map (datain_5, enout, writein, dataout_5);
  bit6 : entity work.bitstorage(memlike) port map (datain_6, enout, writein, dataout_6);
  bit7 : entity work.bitstorage(memlike) port map (datain_7, enout, writein, dataout_7);
end architecture memmy;

--------------------------------------------------------------------------------
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_unsigned.all;

entity register32 is
  port(datain: in std_logic_vector(31 downto 0);
  	 enout32,enout16,enout8: in std_logic;
 		 writein32, writein16, writein8: in std_logic;
 		 dataout: out std_logic_vector(31 downto 0));
end entity register32;

architecture biggermem of register32 is
 	-- hint: you'll want to put register8 as a component here
  -- so you can use it below

  component register8
 	  port(datain: in std_logic_vector(7 downto 0);
 	     enout:  in std_logic;
 	     writein: in std_logic;
 	     dataout: out std_logic_vector(7 downto 0));
  end component;

  signal wordSize: STD_LOGIC_VECTOR(3 DOWNTO 0);
  signal enout32,enout16,enout8: std_logic;
  signal writein32, writein16, writein8: std_logic;
  signal enWriteAll: std_logic_vector(3 DOWNTO 0);

begin
-- Create two seperate register8s, then make a reg16 from two 8's, then use two 8's and a 16 to make a 32
  rg8_a: work.register8(memmy) port map(datain(7 downto 0), enout, writein, dataout(7 downto 0));
  rg8_b: work.register8(memmy) port map(datain(15 downto 8), enout, writein, dataout(15 downto 8));
  rg16: work.register8(memmy) port map(rg8_b & rg8_a, enout, writein, rg8_b & rg8_a);
  rg32: work.register8(memmy) port map(rg16 & rg8_b & rg8_a, enout, writein, rg16 & rg8_b & rg8_a);

  enoutAll <= (enout32 & enout16 & enout8); -- Concatenate the enables for the enable input
  writeinAll <= (writein32 & writein16 & writein8); -- Concatenate the enables for the write input

-- Logic for wordSize
wordSize <= "1111" when enoutAll = "111" else   -- whole word
            "0111" when enoutAll = "011" else   -- half word

-- Logic for enWriteAll
enWriteAll <= "1111" when enoutSignal = "111" else  -- whole word
              "0111" when enWriteAll = "011" else   -- half word

end architecture biggermem;

--------------------------------------------------------------------------------
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_unsigned.all;

entity fulladder is
    port (a : in std_logic;
          b : in std_logic;
          cin : in std_logic;
          sum : out std_logic;
          carry : out std_logic
          );
end fulladder;

architecture addlike of fulladder is
begin
  sum  <= a xor b xor cin;
  carry <= (a and b) or (a and cin) or (b and cin);
end architecture addlike;

--------------------------------------------------------------------------------
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_unsigned.all;

entity adder_subtracter is
  port(	datain_a: in std_logic_vector(31 downto 0);
 		datain_b: in std_logic_vector(31 downto 0);
 		add_sub: in std_logic;
 		dataout: out std_logic_vector(31 downto 0);
 		co: out std_logic);
end entity adder_subtracter;

architecture calc of adder_subtracter is

begin
-- insert code here.
  if (add_sub = '0') then
    dataout <= datain_a(31 downto 0) + datain_b(31 downto 0);
    temp <= ('0' & datain_a(31 downto 0)) and ('0' & datain_b(31 downto 0));
    co <= temp(32);
  if (add_sub = '1') then
    dataout <= datain_a(31 downto 0) - datain_b(31 downto 0);
    co <= ('0' & datain_a(31 downto 0)) and ('0' & datain_b(31 downto 0));

end architecture calc;

--------------------------------------------------------------------------------
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.numeric_std.all;
Use ieee.std_logic_unsigned.all;

entity shift_register is
  port(	datain: in std_logic_vector(31 downto 0);
    dir: in std_logic;
    shamt:	in std_logic_vector(4 downto 0);
    dataout: out std_logic_vector(31 downto 0));
end entity shift_register;

architecture shifter of shift_register is

begin
-- insert code here.
end architecture shifter;
